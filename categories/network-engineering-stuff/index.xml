<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network Engineering Stuff on VicarOfCrom&#39;s Blog</title>
    <link>https://VicarOfCrom.github.io/categories/network-engineering-stuff/</link>
    <description>Recent content in Network Engineering Stuff on VicarOfCrom&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Oct 2016 09:52:36 -0700</lastBuildDate>
    <atom:link href="https://VicarOfCrom.github.io/categories/network-engineering-stuff/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JunosPolicyChecker</title>
      <link>https://vicarofcrom.github.io/post/JunosPolicyChecker/</link>
      <pubDate>Thu, 20 Oct 2016 09:52:36 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/JunosPolicyChecker/</guid>
      <description>

&lt;h1 id=&#34;juniper-firewall-policy-checker&#34;&gt;Juniper Firewall Policy Checker&lt;/h1&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a little script I wrote using pythonEZ.  Give it tcp session details and it connects to the firewall and checks what rules are there for that session.  It authenticates with a username that has rights to only the queries it needs.  I wrapped it up in a web.py page and threw it up on an IIS server.  That way I can use windows domain security on the front end easily.  I&amp;rsquo;ll throw the code up here for now, and I&amp;rsquo;ll try and write up details for how I did everything else if I can remember.&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The code&lt;/h2&gt;

&lt;h3 id=&#34;app-py&#34;&gt;app.py&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import web
from jnpr.junos import Device
from jnpr.junos.op.routes import RouteTable
from myTables.op.policy import policyTable
from myTables.op.intZone import IntZoneTable
import socket

urls = (
    &#39;/app\.py.*&#39;, &#39;Index&#39;,
    &#39;/policy_checker&#39;, &#39;Index&#39;
)

app = web.application(urls, globals())

render = web.template.render(&#39;templates/&#39;, base=&amp;quot;layout&amp;quot;)

class Index(object):
    def GET(self):
        return render.policy_checker()
        
    def POST(self):
        query = web.input(src=&amp;quot;Source&amp;quot;, dst=&amp;quot;Destination&amp;quot;, proto=&amp;quot;Protocol&amp;quot;, dstPort=&amp;quot;DstPort&amp;quot;)
        device=&amp;quot;192.168.176.1&amp;quot;
        user=&amp;quot;XXXX&amp;quot;
        passwd =&amp;quot;XXXX&amp;quot;
        
        # Test for hostname or IP and resolve if necessary
        try:
            socket.gethostbyname(query.src)
        except:
            return &amp;quot;resolve failed&amp;quot;
        if socket.gethostbyname(query.src) == query.src:
            # It&#39;s an IP
            srcIP = query.src
        else:
            # It&#39;s a host name
            srcIP = socket.gethostbyname(query.src)
        if socket.gethostbyname(query.dst) == query.dst:
            # It&#39;s an IP
            dstIP = query.dst
        else:
            # It&#39;s a host name
            dstIP = socket.gethostbyname(query.dst)
        
        dev = Device(device,user=user,password=passwd)
        try:
            dev.open(normalize=True)
        except:
            return &amp;quot;connection failed&amp;quot;
        
        srcRoute = RouteTable(dev).get(srcIP, best=True)
        dstRoute = RouteTable(dev).get(dstIP, best=True)
        srcInt=srcRoute[0].via
        dstInt=dstRoute[0].via
        
        sz = IntZoneTable(dev).get(srcInt)
        dz = IntZoneTable(dev).get(dstInt)
        srcZone = sz[0].zone
        dstZone = dz[0].zone
        
        policy = policyTable(dev).get(from_zone=srcZone, to_zone=dstZone, source_ip=srcIP, destination_ip=dstIP, source_port=&#39;1&#39;, destination_port=query.dstPort, protocol=query.proto )
        dev.close()
        details = {&#39;srcZone&#39;: srcZone, &#39;dstZone&#39;: dstZone, &#39;srcIP&#39;: policy[0].src.items(), &#39;dstIP&#39;: policy[0].dst.items(), &#39;app&#39;: policy[0].app, &#39;action&#39;: policy[0].action}
        return render.policy_report(details = details)
        
if __name__ == &amp;quot;__main__&amp;quot;:
    app.run()

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;policy-checker-html&#34;&gt;policy_checker.html&lt;/h3&gt;

&lt;p&gt;html page with form to get user information and pass to python script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Policy Checker (Beta)&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;Enter session information&amp;lt;/h2&amp;gt;

&amp;lt;form name=&amp;quot;query&amp;quot;
    action=&amp;quot;/policy_checker&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
    Protocol: &amp;lt;select name=&amp;quot;proto&amp;quot;&amp;gt;
    &amp;lt;option value=&amp;quot;tcp&amp;quot;&amp;gt;TCP&amp;lt;/option&amp;gt;
    &amp;lt;option value=&amp;quot;udp&amp;quot;&amp;gt;UDP&amp;lt;/option&amp;gt;
    &amp;lt;option value=&amp;quot;icmp&amp;quot;&amp;gt;ICMP&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    Source: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;src&amp;quot;&amp;gt;
    IP address or Hostname
    &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    Destination: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;dst&amp;quot;&amp;gt;
    IP address or Hostname
    &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    Destination Port: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;dstPort&amp;quot;&amp;gt;
    Input &amp;quot;1&amp;quot; for ICMP
    &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
TCP/UDP port number information can be found at the &amp;lt;a href=&amp;quot;http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Service Name and Transport Protocol Port Number Registry&amp;lt;/a&amp;gt; here.
&amp;lt;/p&amp;gt;

Report errors/suggestions to Vicar Of Crom
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;to-add&#34;&gt;To add&lt;/h2&gt;

&lt;p&gt;Multiple firewall support&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>