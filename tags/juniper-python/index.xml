<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Juniper Python on VicarOfCrom&#39;s Blog</title>
    <link>https://VicarOfCrom.github.io/tags/juniper-python/</link>
    <description>Recent content in Juniper Python on VicarOfCrom&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Copyright Text</copyright>
    <lastBuildDate>Thu, 20 Oct 2016 09:52:36 -0700</lastBuildDate>
    <atom:link href="https://VicarOfCrom.github.io/tags/juniper-python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JunosPolicyChecker</title>
      <link>https://vicarofcrom.github.io/post/JunosPolicyChecker/</link>
      <pubDate>Thu, 20 Oct 2016 09:52:36 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/JunosPolicyChecker/</guid>
      <description>

&lt;h1 id=&#34;juniper-firewall-policy-checker&#34;&gt;Juniper Firewall Policy Checker&lt;/h1&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a little script I wrote using pythonEZ.  Give it tcp session details and it connects to the firewall and checks what rules are there for that session.  It authenticates with a username that has rights to only the queries it needs.  I wrapped it up in a web.py page and threw it up on an IIS server.  That way I can use windows domain security on the front end easily.  I&amp;rsquo;ll throw the code up here for now, and I&amp;rsquo;ll try and write up details for how I did everything else if I can remember.&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The code&lt;/h2&gt;

&lt;h3 id=&#34;policy-checker-py&#34;&gt;policy_checker.py&lt;/h3&gt;

&lt;p&gt;`# -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-
&amp;ldquo;&amp;rdquo;&amp;rdquo;
Created on Mon Feb 22 15:58:01 2016&lt;/p&gt;

&lt;p&gt;@author: VicarOfCrom
&amp;ldquo;&amp;rdquo;&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;import-stuff&#34;&gt;import stuff&lt;/h1&gt;

&lt;p&gt;#import sys
#from pprint import pprint as pp
from jnpr.junos import Device
#from getpass import getpass
from jnpr.junos.op.routes import RouteTable
from myTables.op.zone import ZoneIntTable
from myTables.op.policy import policyTable&lt;/p&gt;

&lt;h1 id=&#34;change-username-after-testing-is-completed&#34;&gt;change username after testing is completed&lt;/h1&gt;

&lt;p&gt;device=&amp;ldquo;192.168.176.1&amp;rdquo;
user=&amp;ldquo;lentzj&amp;rdquo;
#print &amp;ldquo;\n Please provide password for user &amp;lsquo;&amp;rdquo; + user + &amp;ldquo;&amp;lsquo;on device &amp;lsquo;&amp;rdquo; + device +&amp;ldquo;&amp;rsquo;.&amp;rdquo;
#passwd = getpass()
passwd =&amp;ldquo;S3pulTur@&amp;rdquo;
srcIP = &amp;ldquo;192.168.152.34&amp;rdquo;
dstIP = &amp;ldquo;192.168.152.2&amp;rdquo;
proto = &amp;ldquo;tcp&amp;rdquo;
dstPort = &amp;ldquo;1433&amp;rdquo;&lt;/p&gt;

&lt;p&gt;dev = Device(device,user=user,password=passwd)
try:
    dev.open(normalize=True)
    print &amp;ldquo;connected to &amp;rdquo; + device + &amp;ldquo; as dev&amp;rdquo;
except:
    print &amp;ldquo;connection failed.&amp;rdquo;
    print&amp;rdquo;\n** Type exit() to quit **&amp;rdquo;&lt;/p&gt;

&lt;p&gt;srcRoute = RouteTable(dev).get(srcIP, best=True)
dstRoute = RouteTable(dev).get(dstIP, best=True)
srcInt=srcRoute[0].via
dstInt=dstRoute[0].via
#pp(srcInt)
#pp(dstInt)&lt;/p&gt;

&lt;p&gt;zones = ZoneIntTable(dev).get()
for zone in zones.items():
    for interfaces in zone[1]:
        if interfaces[1] != None:
            if srcInt in interfaces[1]:
                srcZone = zone[0]
            if dstInt in interfaces[1]:
                dstZone = zone[0]
#print srcZone
#print dstZone&lt;/p&gt;

&lt;p&gt;policy = policyTable(dev).get(from_zone=srcZone, to_zone=dstZone, source_ip=srcIP, destination_ip=dstIP, source_port=&amp;lsquo;1&amp;rsquo;, destination_port=dstPort, protocol=proto )
#pp(policy.items())&lt;/p&gt;

&lt;p&gt;print(&amp;lsquo;session is &amp;rsquo; + policy[0].action + &amp;lsquo;ed&amp;rsquo;)&lt;/p&gt;

&lt;p&gt;print(&amp;lsquo;POLICY DETAILS:&amp;lsquo;)
print&amp;rsquo;Source Zone: &amp;lsquo;, srcZone,&amp;rsquo;   Destination Zone: &amp;lsquo;, dstZone
print&amp;rsquo;Source: &amp;lsquo;, policy[0].src.items()
print&amp;rsquo;Destination: &amp;lsquo;, policy[0].dst.items()
print&amp;rsquo;Application: &amp;lsquo;, policy[0].app
print&amp;rsquo;Action:&amp;lsquo;, policy[0].action&lt;/p&gt;

&lt;p&gt;dev.close()`&lt;/p&gt;

&lt;h3 id=&#34;app-py&#34;&gt;app.py&lt;/h3&gt;

&lt;p&gt;`import web
from jnpr.junos import Device
from jnpr.junos.op.routes import RouteTable
from myTables.op.policy import policyTable
from myTables.op.intZone import IntZoneTable&lt;/p&gt;

&lt;p&gt;urls = (
    &amp;lsquo;/app.py.*&amp;lsquo;, &amp;lsquo;Index&amp;rsquo;,
    &amp;lsquo;/policy_checker&amp;rsquo;, &amp;lsquo;Index&amp;rsquo;
)&lt;/p&gt;

&lt;p&gt;app = web.application(urls, globals())&lt;/p&gt;

&lt;p&gt;render = web.template.render(&amp;lsquo;templates/&amp;rsquo;, base=&amp;ldquo;layout&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;class Index(object):
    def GET(self):
        return render.policy_checker()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def POST(self):
    form = web.input(srcIP=&amp;quot;SourceIP&amp;quot;, dstIP=&amp;quot;DestinationIP&amp;quot;, proto=&amp;quot;Protocol&amp;quot;, dstPort=&amp;quot;DstPort&amp;quot;)
    device=&amp;quot;192.168.176.1&amp;quot;
    user=&amp;quot;tesco.vee&amp;quot;
    passwd =&amp;quot;Q-&amp;amp;0MU+aDh,IXhZG$rG&amp;quot;

    dev = Device(device,user=user,password=passwd)
    try:
        dev.open(normalize=True)
    except:
        return &amp;quot;connection failed&amp;quot;

    srcRoute = RouteTable(dev).get(form.srcIP, best=True)
    dstRoute = RouteTable(dev).get(form.dstIP, best=True)
    srcInt=srcRoute[0].via
    dstInt=dstRoute[0].via

    sz = IntZoneTable(dev).get(srcInt)
    dz = IntZoneTable(dev).get(dstInt)
    srcZone = sz[0].zone
    dstZone = dz[0].zone

    policy = policyTable(dev).get(from_zone=srcZone, to_zone=dstZone, source_ip=form.srcIP, destination_ip=form.dstIP, source_port=&#39;1&#39;, destination_port=form.dstPort, protocol=form.proto )
    dev.close()
    details = {&#39;srcZone&#39;: srcZone, &#39;dstZone&#39;: dstZone, &#39;srcIP&#39;: policy[0].src.items(), &#39;dstIP&#39;: policy[0].dst.items(), &#39;app&#39;: policy[0].app, &#39;action&#39;: policy[0].action}
    return render.policy_report(details = details)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &amp;ldquo;&lt;strong&gt;main&lt;/strong&gt;&amp;ldquo;:
    app.run()
`&lt;/p&gt;

&lt;h2 id=&#34;to-add&#34;&gt;To add&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m sure with a little googling, I can get python to do an NSlookup, then users can input hostnames instead of IP addresses.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>