<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on VicarOfCrom&#39;s Blog</title>
    <link>https://VicarOfCrom.github.io/post/</link>
    <description>Recent content in Posts on VicarOfCrom&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Copyright Text</copyright>
    <lastBuildDate>Thu, 20 Oct 2016 09:52:36 -0700</lastBuildDate>
    <atom:link href="https://VicarOfCrom.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JunosPolicyChecker</title>
      <link>https://vicarofcrom.github.io/post/JunosPolicyChecker/</link>
      <pubDate>Thu, 20 Oct 2016 09:52:36 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/JunosPolicyChecker/</guid>
      <description>

&lt;h1 id=&#34;juniper-firewall-policy-checker&#34;&gt;Juniper Firewall Policy Checker&lt;/h1&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a little script I wrote using pythonEZ.  Give it tcp session details and it connects to the firewall and checks what rules are there for that session.  It authenticates with a username that has rights to only the queries it needs.  I wrapped it up in a web.py page and threw it up on an IIS server.  That way I can use windows domain security on the front end easily.  I&amp;rsquo;ll throw the code up here for now, and I&amp;rsquo;ll try and write up details for how I did everything else if I can remember.&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The code&lt;/h2&gt;

&lt;h3 id=&#34;app-py&#34;&gt;app.py&lt;/h3&gt;

&lt;p&gt;`import web
from jnpr.junos import Device
from jnpr.junos.op.routes import RouteTable
from myTables.op.policy import policyTable
from myTables.op.intZone import IntZoneTable&lt;/p&gt;

&lt;p&gt;urls = (
    &amp;lsquo;/app.py.*&amp;lsquo;, &amp;lsquo;Index&amp;rsquo;,
    &amp;lsquo;/policy_checker&amp;rsquo;, &amp;lsquo;Index&amp;rsquo;
)&lt;/p&gt;

&lt;p&gt;app = web.application(urls, globals())&lt;/p&gt;

&lt;p&gt;render = web.template.render(&amp;lsquo;templates/&amp;rsquo;, base=&amp;ldquo;layout&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;class Index(object):
    def GET(self):
        return render.policy_checker()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def POST(self):
    form = web.input(srcIP=&amp;quot;SourceIP&amp;quot;, dstIP=&amp;quot;DestinationIP&amp;quot;, proto=&amp;quot;Protocol&amp;quot;, dstPort=&amp;quot;DstPort&amp;quot;)
    device=&amp;quot;192.168.176.1&amp;quot;
    user=&amp;quot;tesco.vee&amp;quot;
    passwd =&amp;quot;Q-&amp;amp;0MU+aDh,IXhZG$rG&amp;quot;

    dev = Device(device,user=user,password=passwd)
    try:
        dev.open(normalize=True)
    except:
        return &amp;quot;connection failed&amp;quot;

    srcRoute = RouteTable(dev).get(form.srcIP, best=True)
    dstRoute = RouteTable(dev).get(form.dstIP, best=True)
    srcInt=srcRoute[0].via
    dstInt=dstRoute[0].via

    sz = IntZoneTable(dev).get(srcInt)
    dz = IntZoneTable(dev).get(dstInt)
    srcZone = sz[0].zone
    dstZone = dz[0].zone

    policy = policyTable(dev).get(from_zone=srcZone, to_zone=dstZone, source_ip=form.srcIP, destination_ip=form.dstIP, source_port=&#39;1&#39;, destination_port=form.dstPort, protocol=form.proto )
    dev.close()
    details = {&#39;srcZone&#39;: srcZone, &#39;dstZone&#39;: dstZone, &#39;srcIP&#39;: policy[0].src.items(), &#39;dstIP&#39;: policy[0].dst.items(), &#39;app&#39;: policy[0].app, &#39;action&#39;: policy[0].action}
    return render.policy_report(details = details)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &amp;ldquo;&lt;strong&gt;main&lt;/strong&gt;&amp;ldquo;:
    app.run()
`&lt;/p&gt;

&lt;h2 id=&#34;to-add&#34;&gt;To add&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m sure with a little googling, I can get python to do an NSlookup, then users can input hostnames instead of IP addresses.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FuzzyLogic4</title>
      <link>https://vicarofcrom.github.io/post/FuzzyLogic4/</link>
      <pubDate>Thu, 20 Oct 2016 09:50:00 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/FuzzyLogic4/</guid>
      <description>

&lt;h1 id=&#34;fuzzy-logic-with-engineering-applications-chapter-4&#34;&gt;Fuzzy Logic with Engineering Applications, Chapter 4&lt;/h1&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Membership function

&lt;ul&gt;
&lt;li&gt;Core
The region with complete membership \mu_A(x)=1&lt;/li&gt;
&lt;li&gt;Support
The region with nonzero membership (so basically the entire membership?) \mu_A(x)&amp;gt;0&lt;/li&gt;
&lt;li&gt;Boundaries
More than zero less than one.  basically some degree of membership other than 1 0&amp;lt;\mu_A(x)&amp;lt;1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fuzzy Sets

&lt;ul&gt;
&lt;li&gt;Normal
At least one member has a membership value of 1

&lt;ul&gt;
&lt;li&gt;prototype
In a normal set with exactly one element with a membership value of one, that element is called the prototype&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Convex
    Goes up, then down once, no crazy zigzags.  Seems to be the sames thing as &amp;ldquo;normal&amp;rdquo;&lt;/li&gt;
&lt;li&gt;generalized membership function
different from the more or less normal looking sloped forms.  Looks like a double parabola.&lt;br /&gt;
    * interval-valued membership function
        A subset of generalized membership function.
    * type 2 fuzzy set
        If you allow the intervals to become fuzzy then the membership function is referred to as a type 2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fuzzification
Making &amp;ldquo;crisp&amp;rdquo; data fuzzy. Most common method seems to be to pick your zero and unity values, and use linear interpolation.&lt;/li&gt;
&lt;li&gt;Defuzzification
Putting back after you do stuff to it.  There are a bunch of methods for this

&lt;ul&gt;
&lt;li&gt;Lambda Cut
Precursor to all other defuzzification operations.  Take a fuzzy set and pick a lambda value from 0 to 1 representing grade of membership.  Any member that&amp;rsquo;s higher passes, any lower don&amp;rsquo;t. Do this a bunch of times at different values and you get an idea how the members are distributed.  Reminds me a lot of AtoD conversion.  You can do it for relations too.  I&amp;rsquo;m going to pretend I understand that part.&lt;/li&gt;
&lt;li&gt;1. Max membership principle&lt;/li&gt;
&lt;li&gt;2. Centroid Method&lt;/li&gt;
&lt;li&gt;3. Weighted Average Method&lt;/li&gt;
&lt;li&gt;4. Mean Max Membership&lt;/li&gt;
&lt;li&gt;5. Center of sums&lt;/li&gt;
&lt;li&gt;6. Center of largest area&lt;/li&gt;
&lt;li&gt;7. First (or last) of Maxima&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applicability&#34;&gt;Applicability&lt;/h2&gt;

&lt;p&gt;Definitely going to be fuzzifying, may or may not be defuzzifying.  Will have to think about it.&lt;/p&gt;

&lt;h2 id=&#34;further-research&#34;&gt;Further Research&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s time to start looking at some real world examples of how others are implementing this stuff.  I especially want to see what they do with time stamped data streams, what&amp;rsquo;s the best method to carry along some time information through the fuzzification process.&lt;/p&gt;

&lt;p&gt;From python below, c-means clustering seems like the go to method for multidimensional data.  Time to find where in the book c-means is covered and get after it.&lt;/p&gt;

&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;Installed scikit fuzzy into my python playground.  Ran some of the examples.  No surprise copy and pasting someone else code looks fine.  going through the &lt;a href=&#34;http://pythonhosted.org/scikit-fuzzy/auto_examples/index.html&#34;&gt;examples&lt;/a&gt; line by line to get proficient with the toolkit.  The tipping example looks like the linear interpolation type of fuzzification that I&amp;rsquo;ve been typically seeing.  The c-means example seems much more applicable to this purpose, but I need to read up on it more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FuzzyLogic3</title>
      <link>https://vicarofcrom.github.io/post/FuzzyLogic3/</link>
      <pubDate>Mon, 10 Oct 2016 12:45:12 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/FuzzyLogic3/</guid>
      <description>

&lt;h1 id=&#34;fuzzy-logic-with-engineering-applications-chapter-3&#34;&gt;Fuzzy Logic with Engineering Applications, Chapter 3&lt;/h1&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Relation

&lt;ul&gt;
&lt;li&gt;Classical (Crisp): Used as a baseline for understanding fuzzy relations.  Foregoing notes on these.&lt;/li&gt;
&lt;li&gt;Fuzzy Relations: Similar to classical relations, but because mapping is done with a membership function relations can have &amp;ldquo;degrees&amp;rdquo; of strength rather than being just binary

&lt;ul&gt;
&lt;li&gt;Properties

&lt;ul&gt;
&lt;li&gt;Reflexivity&lt;/li&gt;
&lt;li&gt;Symmetry&lt;/li&gt;
&lt;li&gt;Transitivity&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Crisp Equivalence Relation&lt;/li&gt;
&lt;li&gt;Crisp Tolerance Relation&lt;/li&gt;
&lt;li&gt;Fuzzy Tolerance and Equivalence Relations&lt;/li&gt;
&lt;li&gt;Value Assignments

&lt;ul&gt;
&lt;li&gt;Cartesian product&lt;/li&gt;
&lt;li&gt;Closed-form expression&lt;/li&gt;
&lt;li&gt;Lookup table&lt;/li&gt;
&lt;li&gt;Linguistic rules of knowledge&lt;/li&gt;
&lt;li&gt;Classification&lt;/li&gt;
&lt;li&gt;Automated methods from input/output data&lt;/li&gt;
&lt;li&gt;Similarity methods in data manipulation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cosine Amplitude&lt;/li&gt;
&lt;li&gt;Max-Min Method&lt;/li&gt;
&lt;li&gt;Other Similarity Methods: Even more methods exist&amp;hellip; The author cites himself in the same book as a source for those, but the first edition.  Not sure what&amp;rsquo;s going on there. Hopefully they show up in a later chapter.&lt;/li&gt;
&lt;li&gt;Other forms of the composition Operation
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A couple of examples such as back EMF in a motor, which already have solutions (I think) that don&amp;rsquo;t require fuzzy logic.  I suppose it&amp;rsquo;s helpful to see how its used, but as I&amp;rsquo;m reading I keep thinking it&amp;rsquo;s extraneous effort, which kind of distracts me from the specifics.  I would like to find an example of a problem that can only be solved with fuzzy logic, or at least better/more efficiently.&lt;/p&gt;

&lt;h2 id=&#34;applicability&#34;&gt;Applicability&lt;/h2&gt;

&lt;p&gt;This together with chapter four seem to have pretty high applicability for approach I&amp;rsquo;m taking to the sensor correlation problem.  I&amp;rsquo;ve got a pretty good idea how to formulate the membership function for certain types of data.  What would be really cool would be to have an algorithm that would analyze a range of data and look for trends or groupings and used those to generate the fuzzy sets.  This would be useful for types of data where you don&amp;rsquo;t know exactly where the delineation is going to fall ahead of time.  This might be outside my capacity though.&lt;/p&gt;

&lt;h2 id=&#34;further-research&#34;&gt;Further Research&lt;/h2&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;p&gt;Everything on youtube is basically introductions to the concept, without many applications.  This book continues to be pretty much the best resource I think I&amp;rsquo;m going to find for a while as far as applied fuzzy logic.&lt;/p&gt;

&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;I found a fuzzy logic toolkit for python.  Since morse uses python already, I&amp;rsquo;m going to start playing with creating fuzzy sets in python and running relationships on them, in the future hope of porting simulated robot sensor data directly from morse into the fuzzy logic toolkit, and then into dialectica.  &lt;a href=&#34;https://pypi.python.org/pypi/scikit-fuzzy&#34;&gt;python fuzzy logic toolkit&lt;/a&gt; Will probably use jupyter as a playground and just upload sites directly from there or something.&lt;/p&gt;

&lt;h3 id=&#34;cognition&#34;&gt;Cognition&lt;/h3&gt;

&lt;p&gt;All this fuzzy stuff has really interesting implications when applied to the dialectica framework.  Particularly when calculating nodal relationships.  It should be possible to increment/decremement a nodes fuzzy membership in a group as users navigate the tree structure.  The more browsed trees would get a higher membership probability and less browsed would be gradually decremented and deleted.  This gives the algorithm a robustness for dealing with bad tags as well.  This proposed implementation would be roughly analogous to congnitive theory.  The more you access learned skills in the same way the easier it becomes&amp;hellip; building up those metaphorical ruts in the road.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SensorCorrelationOverview</title>
      <link>https://vicarofcrom.github.io/post/SensorCorrelationOverview/</link>
      <pubDate>Fri, 07 Oct 2016 11:34:55 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/SensorCorrelationOverview/</guid>
      <description>

&lt;h1 id=&#34;sensor-correlation-project&#34;&gt;Sensor Correlation Project&lt;/h1&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Imagine you have a scientific robot of some sort.  It gets sent off into some environment like a volcano to take measurements.  The robot in question has multiple sensors, all of which log data multiple times a second and stream it back to your control system. All of these data streams have to be processed and shown to a human for interpretation.  Even with only a couple of sensors, it&amp;rsquo;s impossible for human eyes to make sense of all the data streaming in.  Important correlations and discoveries will be missed, while time is wasted just plotting the data to visualize what appears to be a bunch of noise.&lt;/p&gt;

&lt;h2 id=&#34;the-plan&#34;&gt;The Plan&lt;/h2&gt;

&lt;p&gt;The ultimate goal is to correlate pertinent portions of these data streams, and then to display the results in a manner that&amp;rsquo;s more easily interpreted by a human user.  In order to do this, I will need a robot simulation environment to generate data streams.  I&amp;rsquo;ll then need to create an algorithm to take the continuous sensor data that is quantitative and discretize it into a more quantitative form that lends itself to being categorized.  Then each entry and its associated categories will have to be fed into another algorithm for sorting and display.  This blog will consist of notes on research efforts as I figure out the best way to approach each of these steps.  There may also be an occaisional how to thrown in if I feel like I have something to add to the existing documentation.  Since this is a working notebook thats constantly being updated for clarification, expect errors and inconsistencies, and informality.&lt;/p&gt;

&lt;h2 id=&#34;morse&#34;&gt;MORSE&lt;/h2&gt;

&lt;p&gt;For the robot simulation engine I will most likely go with MORSE.  The price is right and it looks like it does everything I need.  I particularly need to look into the semantic camera.  If I want to pass object identifications to the discretization engine, the semantic camera should allow that, without having to construct an object identification algorithm.  This is perfect for me, since its not what I&amp;rsquo;m trying to do, and I&amp;rsquo;m sure others have already done it better than I ever could.&lt;/p&gt;

&lt;h2 id=&#34;discretization&#34;&gt;Discretization&lt;/h2&gt;

&lt;p&gt;This is the area I expect to expend the majority of my effort.  I need to come up with a generic algorithm for discretizing and categorizing sensor data.  I&amp;rsquo;m sure others have done similar work, so research will be required.  I&amp;rsquo;m coming up with a list of articles related to the discipline of sensor fusion, and I&amp;rsquo;ll be going through them and using this blog to gather thoughts on how well they apply to this project.&lt;/p&gt;

&lt;h2 id=&#34;dialectica&#34;&gt;Dialectica&lt;/h2&gt;

&lt;p&gt;For the presentation algorithm, I will use the dialectical architecture as presented by Dr. Rico Picone and Bryan Powel in their paper &amp;ldquo;A New Information Architecture: a Synthesis of Structure, Flow, and Dialectic&amp;rdquo;.  I think that the synthesis of Hierarchical and organic architecture proposed in this paper will be perfect for presenting the information to human eyes in order to facilitate pattern recognition.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FuzzyLogicIntro</title>
      <link>https://vicarofcrom.github.io/post/FuzzyLogicIntro/</link>
      <pubDate>Thu, 06 Oct 2016 19:15:10 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/FuzzyLogicIntro/</guid>
      <description>

&lt;h1 id=&#34;fuzzy-logic-intro&#34;&gt;Fuzzy Logic Intro&lt;/h1&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;After a small amount of research into sensor fusion.  I decided that the best path to explore re sensor data discretization would be Fuzzy Logic.  From the reading, it seems like the perfect tool to take a stream of data such as temperature, and rewrite it from very numerical data (100.2 F) to a more subjective form (HOT!).  To this end, I decided to investigate fuzzy logic and its engineering applications in order to hopefully leverage it as a tool for data discretization for the sensor correlation project.  The best source on the topic as it relates to engineering appears to be Fuzzy Logic with Engineering Applications by Timothy J. Ross.  This article will be the first of several that will summarize sections of the book and note applications and further research areas for my sensor correlation project.&lt;/p&gt;

&lt;h3 id=&#34;chapter-1&#34;&gt;Chapter 1&lt;/h3&gt;

&lt;p&gt;Chapter 1 starts off with a great Aristotle quote that I&amp;rsquo;m totally going to file away for future use if I ever write a CFS article.  Like any good introduction article, it defines the subject matter, which I&amp;rsquo;ve already mentioned briefly above.  The important thing to remember is that fuzzy sets aren&amp;rsquo;t precise, but have imprecise properties of membership.  We&amp;rsquo;ll skip over the intro and try to get to the useful stuff.&lt;/p&gt;

&lt;h3 id=&#34;chapter-2&#34;&gt;Chapter 2&lt;/h3&gt;

&lt;p&gt;Universe of discourse: The universe of all available informaiton on a given problem.
Chapter 2 starts with a brief overview of classical set theory&amp;hellip; Union, Intersection, etc.  The operations and properties for classical sets are similiar to the ones that will be used for fuzzy sets.  Once values are lumped into fuzzy sets with membership functions then operations such as unions, intersections, and complements can be run on them.  There&amp;rsquo;s also an extra set of functions that apply only to fuzzy sets.  t-norms, t-conorms, and others are mentioned, but I don&amp;rsquo;t think I have the cognitive capactiy to handle them right now.  Especially since I&amp;rsquo;m not sure how applicable they&amp;rsquo;ll be to what I&amp;rsquo;m doing yet.&lt;/p&gt;

&lt;h2 id=&#34;applicablity&#34;&gt;Applicablity&lt;/h2&gt;

&lt;p&gt;2 chapters in, I am very optimistic about the applicability of fuzzy sets to the dscretization problem I need to solve.  It&amp;rsquo;s interesting how whenever I think I&amp;rsquo;m doing something that hasn&amp;rsquo;t been done before, a little research shows that not only has it&amp;rsquo;s been done, but to a degree I couldn&amp;rsquo;t even anticipate by a whole body of science.  Investing some time into learning these fuzzy sets should pay off not only for this project, but for others to come.&lt;/p&gt;

&lt;h2 id=&#34;further-research&#34;&gt;Further Research&lt;/h2&gt;

&lt;h3 id=&#34;membership-functions&#34;&gt;Membership functions&lt;/h3&gt;

&lt;p&gt;I feel comfortable with the definitions, but I could definitely use more practice with the applications.  I need to do some googling and find some examples of what membership functions actually look like, and what the result looks like when applied to a small data set.  Maybe I&amp;rsquo;ll get there in the next few chapters also.&lt;/p&gt;

&lt;h3 id=&#34;set-notation-equations-in-markdown&#34;&gt;Set Notation, Equations in Markdown&lt;/h3&gt;

&lt;p&gt;Not directly applicable to the project, but in the near future I&amp;rsquo;m going to need to keep notes on membership functions, sets, etc.  Since I use markdown/hugo to build this blog, I will need to find some guides for getting that stuff formatted.&lt;/p&gt;

&lt;h3 id=&#34;dialectica-set-notation&#34;&gt;Dialectica Set Notation&lt;/h3&gt;

&lt;p&gt;The algorithm I&amp;rsquo;m planning on using for preparing the categories for presentation is dialectica.  It also makes extensive use of set notation. If some of these unions wind up being calculated as part of the fuzzy set creation, then it might be beneficial to computational efficiency to pass them to dialectica somehow rather than calculate it twice.  It might be worth playing with once I start actually creating fuzzy sets from the data streams. On the other hand, it might be a big fat waste of time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sensor fusion sasiadek</title>
      <link>https://vicarofcrom.github.io/post/sensor-fusion-sasiadek/</link>
      <pubDate>Wed, 28 Sep 2016 12:40:46 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/sensor-fusion-sasiadek/</guid>
      <description>

&lt;h1 id=&#34;sensor-fusion-by-j-z-sasiadek&#34;&gt;SENSOR FUSION by J.Z. Sasiadek&lt;/h1&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The paper begins with a breakdown of various sensor fusion concepts in order to define where this work falls in the greater world of sensor fusion.  that breakdown is as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sensor fusion

&lt;ul&gt;
&lt;li&gt;Probabilistic Methods

&lt;ul&gt;
&lt;li&gt;Bayesian Reasoning&lt;/li&gt;
&lt;li&gt;Evidence Theory&lt;/li&gt;
&lt;li&gt;Robust Statistics&lt;/li&gt;
&lt;li&gt;Recursive Operators&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Least Squares Techniques

&lt;ul&gt;
&lt;li&gt;Kalman Filtering&lt;/li&gt;
&lt;li&gt;Optimal Theory&lt;/li&gt;
&lt;li&gt;Regularization&lt;/li&gt;
&lt;li&gt;Uncertianty Ellipsoids&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intelligent Fusion

&lt;ul&gt;
&lt;li&gt;Fuzzy Logic&lt;/li&gt;
&lt;li&gt;Neural Networks&lt;/li&gt;
&lt;li&gt;Genetic Algorithms
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This paper focus on fusing GPS (Global Positioning System) and INS (Inertial Navigation System) data to improve positional accuracy in robotics.  The fusion techniques used are a combination of Kalman Filtering and Fuzzy Logic.  This so called Fuzzy Logic Adaptive System showed more accurate results than an Extended Kalman Filter.  Divergence in Kalman filters occurs if the theoretical behavior and actual behavior don&amp;rsquo;t agree.  It comes in two flavors: Apparent and True.  The fuzzy logic adaptive controller (FLAC) introduced in the paper aims to prevent divergence.  Membership functions for the fuzzy logic controller are defined&lt;/p&gt;

&lt;h2 id=&#34;applicability&#34;&gt;Applicability&lt;/h2&gt;

&lt;p&gt;The methods presented in this article were exciting to me at first glance.  But this type of sensor fusion is focused solely on integrating similar types of data.  In this case it&amp;rsquo;s location data in the form of GPS and INS.  My project is more analogous to event correlation in that it will be about taking disparate data such as timestamps, location, temperature, etc and correlating them in such a way as to help an operator pick out relationships.  In the first iterations, I think it&amp;rsquo;s safe to make the assumption that the data streams themselves have no significant error.  I think for the correlation effort it&amp;rsquo;s best to make the simplifying assumption that data divergence is negligible.  Later build would use these methods to clean up the data points and make them more accurate before passing to my discretization and correlation engine.&lt;/p&gt;

&lt;h2 id=&#34;further-research&#34;&gt;Further Research&lt;/h2&gt;

&lt;h3 id=&#34;fuzzy-logic&#34;&gt;Fuzzy Logic&lt;/h3&gt;

&lt;p&gt;Sasiadek examples for integration of fuzzy logic correlate most with the discretization that will need to be done in order to pass data from the MORSE robotics simulation into the presentation algorithm.  I think this is going to be the best angle to take for future research into how to achieve the discretization I need.&lt;/p&gt;

&lt;h3 id=&#34;kalman-filters&#34;&gt;Kalman Filters&lt;/h3&gt;

&lt;p&gt;Many of these papers I&amp;rsquo;ve been reading focus on extending the functionality of Kalman Filters.  I have a rough idea what they are and what they do, but I need to invest some time into fully grokking them so that when papers talk about modifications or whatever I know what&amp;rsquo;s going on.  I can infer what error covariance means by context, but I should just learn it completely.  It may have uses in this or other projects.&lt;/p&gt;

&lt;h3 id=&#34;event-correlation&#34;&gt;Event Correlation&lt;/h3&gt;

&lt;p&gt;Because of the nature of this project, it may be beneficial to veer off and investigate event correlation algorithms in order to see of some of that technology can be leveraged.&lt;/p&gt;

&lt;h3 id=&#34;adjustable-sample-rate&#34;&gt;Adjustable Sample Rate&lt;/h3&gt;

&lt;p&gt;It may be necessary to incorporate an adjustaable sample rate into the discretization engine, or maybe later at the presentation level.  Need to research possible options and do risk/reward analysis&lt;/p&gt;

&lt;h4 id=&#34;note-to-self&#34;&gt;Note to self&lt;/h4&gt;

&lt;p&gt;Put variable tables in appendices in papers I write.  I&amp;rsquo;m constantly flipping backwards looking for the first mention of a variable because I forgot what a subscript was for.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hugo test</title>
      <link>https://vicarofcrom.github.io/post/hugo-test/</link>
      <pubDate>Wed, 28 Sep 2016 10:54:29 -0700</pubDate>
      
      <guid>https://vicarofcrom.github.io/post/hugo-test/</guid>
      <description>&lt;p&gt;Test building hugo sites and deploying to github pages.  I&amp;rsquo;ll have to learn markdown.&lt;/p&gt;

&lt;p&gt;Praise Crom&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>